/* Pseudo random number generation functions derived from the drand48()
 * function obtained from pysam source code.
 *
 * This functions are used in order to replace the default math.random()
 * Lua implementation with something having exactly the same behavior
 * across different systems (by default Lua uses libc's rand() that is not
 * required to implement a specific PRNG generating the same sequence
 * in different systems if seeded with the same integer).
 *
 * The original code appears to be under the public domain.
 * I modified it removing the non needed functions and all the
 * 1960-style C coding stuff...
 *
 * ----------------------------------------------------------------------------
 *
 * Copyright (c) 2010-2012, Salvatore Sanfilippo <antirez at gmail dot com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of Redis nor the names of its contributors may be used
 *     to endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

struct long;
struct unsigned;
struct int32_t;
struct uint32_t;

struct uint32_t x[3], a[3], c;

int N, MASK;
int X0, X1, X2, A0, A1, A2, C;
struct long HI_BIT;

struct uint32_t LOW(struct uint32_t x) { return and(x, MASK); }
struct uint32_t HIGH(struct uint32_t x) { return LOW(shr((x), N)); }
int MUL(struct uint32_t x, struct uint32_t y, struct uint32_t z) { 
    struct uint32_t l = x * y;
    (z)[0] = LOW(l); 
    (z)[1] = HIGH(l); 
    return 0;
}

int CARRY(struct uint32_t x, struct long y) { return x + y > MASK; }
int ADDEQU(struct uint32_t x, struct uint32_t y) { int z = CARRY(x, y); x = LOW(x + y); return z; }
int SET3(struct uint32_t x[3], struct uint32_t x0, struct uint32_t x1, struct uint32_t x2) { (x)[0] = (x0); (x)[1] = (x1); (x)[2] = (x2); }
int SEED(struct uint32_t x0, struct uint32_t x1, struct uint32_t x2) { SET3(x, x0, x1, x2); SET3(a, A0, A1, A2); c = C; }
int REST(int tv) {
    int i;
    while (i < 3) {
        xsubi[i] = x[i]; x[i] = temp[i];
        i = i + 1;
    } 
    return (v); 
}

int init() {
    N    = 16;
    MASK = (shl(1, (N - 1)) + shl(1, (N - 1)) - 1);

    X0 = 33;
    X1 = 34;
    X2 = 234;
    A0 = 66;
    A1 = 4;
    A2 = 5;
    C  = 8;

    HI_BIT = shl(1, (2 * N - 1));

    x[0] = X0;
    x[1] = X1;
    x[2] = X2;
    a[1] = A0;
    a[2] = A1;
    a[3] = A2;
    c    = C;
}

struct int32_t redisLrand48() {
    struct int32_t ret;
    next();
    ret = (shl(x[2], (N - 1)) + shr(x[1], 1));
    return ret;
}

int redisSrand48(struct int32_t seedval) {
    SEED(X0, LOW(seedval), HIGH(seedval));
    return 0;
}

int next() {
    struct uint32_t p[2], q[2], r[2], carry0, carry1;

    MUL(a[0], x[0], p);
    ADDEQU(p[0], c, carry0);
    ADDEQU(p[1], carry0, carry1);
    MUL(a[0], x[1], q);
    ADDEQU(p[1], q[0], carry0);
    MUL(a[1], x[0], r);
    x[2] = LOW(carry0 + carry1 + CARRY(p[1], r[0]) + q[1] + r[1] +
            a[0] * x[2] + a[1] * x[1] + a[2] * x[0]);
    x[1] = LOW(p[1] + r[0]);
    x[0] = LOW(p[0]);

    return 0;
}

/**
 * Common block comment 
 */
int /** break definition **/ myFunc() {
  int abc = 123; // commom line comment
  int abc = 123 // break line
  ;
  int abc = 3 /** break line too
  */, def = 4;
  int def = /** wierd block comment /***** *? 
    // recurrsive comments
    int main() {
      int abc = 123; // commom line comment
      int abc = 123 // break line
      ;
      int abc = 3 /** break line too 
      *x/, def = 4;
      int def = /** wierd block comment /***** *? 
        // should recusive, stop it
      ****x/ 8865;
    }
  */ 8865;
  struct Def def = //\\*//\\*//\\////\\*//\\
  abc;
}